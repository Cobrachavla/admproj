{"ast":null,"code":"var _jsxFileName = \"D:\\\\C\\\\admission-dashboard\\\\course-cart\\\\src\\\\components\\\\CourseSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CourseSelector = () => {\n  _s();\n  const [courses, setCourses] = useState([]);\n  const [selectedCourses, setSelectedCourses] = useState([]);\n  useEffect(() => {\n    const fetchCourses = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/college-posts');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        console.log('Fetched courses:', data); // Log fetched data\n        setCourses(data);\n      } catch (error) {\n        console.error('Error fetching courses:', error);\n      }\n    };\n    fetchCourses();\n  }, []);\n  const handleSelect = courseId => {\n    setSelectedCourses(prevSelected => prevSelected.includes(courseId) ? prevSelected.filter(id => id !== courseId) : [...prevSelected, courseId]);\n  };\n  const handleRemove = async () => {\n    const updatedCourses = courses.filter(course => !selectedCourses.includes(course._id));\n    setCourses(updatedCourses);\n    try {\n      const response = await fetch('http://localhost:5000/api/college-posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          updatedCourses\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Error updating courses');\n      }\n      console.log('Courses updated successfully');\n      const data = await response.json(); // Handle response data if needed\n      console.log('Server response:', data);\n    } catch (error) {\n      console.error('Error updating courses:', error);\n    }\n    setSelectedCourses([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: courses.length > 0 ? courses.map(course => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: selectedCourses.includes(course._id),\n          onChange: () => handleSelect(course._id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), course.title, \" \", course.branch, \" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          children: [\"status: \", course.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 46\n        }, this)]\n      }, course._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"No courses available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRemove,\n      disabled: selectedCourses.length === 0,\n      children: \"Remove Selected Courses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(CourseSelector, \"vjRl1VD9d1qY9V4g2g4ru7bVSEs=\");\n_c = CourseSelector;\nexport default CourseSelector;\nvar _c;\n$RefreshReg$(_c, \"CourseSelector\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CourseSelector","_s","courses","setCourses","selectedCourses","setSelectedCourses","fetchCourses","response","fetch","ok","Error","data","json","console","log","error","handleSelect","courseId","prevSelected","includes","filter","id","handleRemove","updatedCourses","course","_id","method","headers","body","JSON","stringify","children","length","map","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","title","branch","status","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/C/admission-dashboard/course-cart/src/components/CourseSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst CourseSelector = () => {\r\n  const [courses, setCourses] = useState([]);\r\n  const [selectedCourses, setSelectedCourses] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCourses = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/college-posts');\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        console.log('Fetched courses:', data); // Log fetched data\r\n        setCourses(data);\r\n      } catch (error) {\r\n        console.error('Error fetching courses:', error);\r\n      }\r\n    };\r\n\r\n    fetchCourses();\r\n  }, []);\r\n\r\n  const handleSelect = (courseId) => {\r\n    setSelectedCourses(prevSelected =>\r\n      prevSelected.includes(courseId)\r\n        ? prevSelected.filter(id => id !== courseId)\r\n        : [...prevSelected, courseId]\r\n    );\r\n  };\r\n\r\n  const handleRemove = async () => {\r\n    const updatedCourses = courses.filter(course => !selectedCourses.includes(course._id));\r\n    setCourses(updatedCourses);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/college-posts', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ updatedCourses }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error updating courses');\r\n      }\r\n\r\n      console.log('Courses updated successfully');\r\n      const data = await response.json(); // Handle response data if needed\r\n      console.log('Server response:', data);\r\n\r\n    } catch (error) {\r\n      console.error('Error updating courses:', error);\r\n    }\r\n\r\n    setSelectedCourses([]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {courses.length > 0 ? (\r\n          courses.map(course => (\r\n            <li key={course._id}>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedCourses.includes(course._id)}\r\n                onChange={() => handleSelect(course._id)}\r\n              />\r\n              {course.title} {course.branch} <i>status: {course.status}</i>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <li>No courses available</li>\r\n        )}\r\n      </ul>\r\n      <button onClick={handleRemove} disabled={selectedCourses.length === 0}>\r\n        Remove Selected Courses\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CourseSelector;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}